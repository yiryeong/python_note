# 첫번째 풀이 방법
class Solution:
    # 연결 리스트 뒤집기
    def reverseList(self, head: ListNode) -> ListNode:
        node, prev = head, None
        
        while node:
            next, node.next = node.next, prev
            prev, node = node, next
        
        return prev
    
    # 연결 리스트를 파이썬 리스트로 변환
    def toList(self, node: ListNode) -> List:
        list: List = []
        while node:
            list.append(node.val)
            node = node.next
        return list
    
    # 파이썬 리스트를 연결 리스트로 변환
    def toReversedLinkedList(self, result: str) -> ListNode:
        prev : ListNode = None
        for r in result:
            node = ListNode(r)
            node.next = prev
            prev = node
        return node
    
    # 두 연결 리스트의 덧셈
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        a = self.toList(self.reverseList(l1))
        b = self.toList(self.reverseList(l2))
        
        resultStr = int(''.join(str(e) for e in a)) + int(''.join(str(e) for e in b))
        
        # 최종 계산 결과 연결 리스트 변환
        return self.toReversedLinkedList(str(resultStr))
    
    
      
    
    
    

# 2번째 풀이 방법
def addTwoNumbers(l1, l2):
    root = head = ListNode(0)
    
    carry = 0
    while l1 or l2 or carry:
        sum = 0
        
        if l1:
            sum += l1.val
            l1 = l1.next
        
        if l2:
            sum += l2.val
            l2 = l2.next
        
        carry, val = divmod(sum + carry, 10)
        head.next = ListNode(val)
        head = head.next

    return root.next
    
   
   
   
   
   
   
   
   
# 이하 테스트 결과 확인 
# 결과: 7->0->8

list1 = [2,4,3]
head_back = head = ListNode(list1[0])
e = 1
while e < len(list1):
      head.next = ListNode(list1[e])
      head = head.next
      e+=1

list2 = [5,6,4]
head_back1 = head1 = ListNode(list2[0])
ee = 1
while ee < len(list2):
      head1.next = ListNode(list2[ee])
      head1 = head1.next
      ee+=1

print(head_back, head_back1)
s = Solution()
print(s.addTwoNumbers(head_back, head_back1))  
print(addTwoNumbers(head_back, head_back1))
